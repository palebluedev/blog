{"componentChunkName":"component---src-templates-blog-post-js","path":"/testing-express-with-jest/","webpackCompilationHash":"4277b28310bbdf4792e6","result":{"data":{"site":{"siteMetadata":{"title":"@palebluedev's blog","author":"palebluedev"}},"markdownRemark":{"id":"97b210b0-5d32-5633-ac77-af5fa27739ca","excerpt":"I’m going to assume a little knowledge straight of the bat and that is that you know what Express and Jest are. Goal: I want to write a test which will assert…","html":"<p>I’m going to assume a little knowledge straight of the bat and that is that you know what <a href=\"https://expressjs.com/\">Express</a> and <a href=\"https://jestjs.io/\">Jest</a> are.</p>\n<p><strong>Goal:</strong> I want to write a test which will assert that when I call <code class=\"language-text\">/example</code> I get back a <code class=\"language-text\">200</code> status code with the payload of <code class=\"language-text\">{ok: true}</code>.</p>\n<p>To do this we can use a pacakge called <a href=\"https://www.npmjs.com/package/supertest\">SuperTest</a>, this package allows us to “glue” together the Express application\nand the Jest tests.</p>\n<p>One thing we need to make sure we do though is not run the server when we run our tests, we can achieve this quite easly by exporting the <code class=\"language-text\">app</code> variable and having another file for starting the server which would look something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// app.js</span>\n<span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'/example'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>ok<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> app<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// server.js</span>\n<span class=\"token keyword\">import</span> app <span class=\"token keyword\">from</span> <span class=\"token string\">'./app'</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<h3>So how do we use super test with Jest?</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'supertest'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> app <span class=\"token keyword\">from</span> <span class=\"token string\">'../whereever/youveplaced/your/app'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/example'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should successfully return with ok true'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This post doens’t explain how to handle state that might, however this just requires stubbing the module to return what you want before the tests run.</p>\n<h3>Pros</h3>\n<ul>\n<li>We’re testing our applicaiton code as a whole (an integration test) without running a server, which means it is very fast.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li>This isn’t a comprehensive end to end test, because we wont be able to test client side events with this approach.</li>\n</ul>","frontmatter":{"title":"Testing Express with Jest.","date":"September 28, 2019","description":"A how to guide using SuperTest"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/testing-express-with-jest/","previous":{"fields":{"slug":"/introducing-my-self/"},"frontmatter":{"title":"Please allow me to introduce myself."}},"next":{"fields":{"slug":"/whats-the-deal-with-dns/"},"frontmatter":{"title":"Whats the deal with DNS!"}}}}}